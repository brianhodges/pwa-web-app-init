mkdir proj
cd proj
mkdir css
mkdir js
cd css
curl -o bootstrap.min.css "https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css"
curl -o bootstrap.min.css.map "https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css.map" 
touch styles.css
cd ..
cd js
curl -o jquery-3.4.0.min.js "https://code.jquery.com/jquery-3.4.0.min.js"
curl -o bootstrap.min.js "https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js"
curl -o bootstrap.min.js.map "https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js.map"
echo '$(function() {
    console.log("jQuery loaded...");
});'>main.js
cd ..
echo '<!DOCTYPE HTML>
<html lang="en">
<head>
    <!-- Encoding -->
    <meta charset="utf-8"/>

    <!-- Mobile Manifest -->
    <link rel="manifest" href="manifest.json" />

    <!-- Icon -->
    <link rel="icon" href="favicon.ico" type="image/x-icon" />
    <link rel="shortcut icon" href="favicon.ico" type="image/x-icon" />
    <link rel="apple-touch-icon" sizes="192x192" href="favicon.ico" />
    
    <!-- Javascript -->
    <script src="./js/jquery-3.4.0.min.js"></script>
    <script src="./js/bootstrap.min.js"></script>
    <script src="./js/main.js"></script>
    
    <!-- CSS -->
    <link rel="stylesheet" href="./css/bootstrap.min.css" />
    <link rel="stylesheet" href="./css/styles.css" />

    <!-- Mobile Friendly -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-capable" content="yes">
    
    <title><!-- Insert your title here --></title>
    
</head>
<body>
    <!-- Insert your content here -->

    <script>
      if ("serviceWorker" in navigator) {
        window.addEventListener("load", function() {
          navigator.serviceWorker.register("./service-worker.js").then(function(registration) {
            // Registration was successful
            console.log("ServiceWorker registration successful with scope: ", registration.scope);
          }, function(err) {
            // registration failed :(
            console.log("ServiceWorker registration failed: ", err);
          }).catch(function(err) {
            console.log(err);
          });
        });
      } else {
        console.log("service worker is not supported");
      }
    </script>
</body>
</html>'>index.html
echo '// Set this to true for production
var doCache = false;

// Name our cache
var CACHE_NAME = "pwa-cache-v1";

// Delete old caches that are not our current one!
self.addEventListener("activate", event => {
  const cacheWhitelist = [CACHE_NAME];
  event.waitUntil(
    caches.keys()
      .then(keyList =>
        Promise.all(keyList.map(key => {
          if (!cacheWhitelist.includes(key)) {
            console.log("Deleting cache: " + key);
            return caches.delete(key);
          }
        }))
      )
  );
});

// The first time the user starts up the PWA, 'install' is triggered.
self.addEventListener("install", function(event) {
  if (doCache) {
    event.waitUntil(
      caches.open(CACHE_NAME)
        .then(function(cache) {
          // Get the assets manifest so we can see what our js file is named
          // This is because webpack hashes it
          fetch("asset-manifest.json")
            .then(response => {
              response.json();
            })
            .then(assets => {
              // Open a cache and cache our files
              // We want to cache the page and the main.js generated by webpack
              // We could also cache any static assets like CSS or images
              const urlsToCache = [
                "/",
                assets["main.js"]
              ];
              cache.addAll(urlsToCache);
              console.log('cached');
            });
        })
    );
  }
});

// When the webpage goes to fetch files, we intercept that request and serve up the matching files
// if we have them
self.addEventListener("fetch", function(event) {
    if (doCache) {
      event.respondWith(
          caches.match(event.request).then(function(response) {
              return response || fetch(event.request);
          })
      );
    }
});'>service-worker.js
curl -o favicon.ico "https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/attachment/19033387/12038288/"
echo '{
  "short_name": "Sample PWA",
  "name": "Sample PWA App",
  "description": "This is a sample pwa web application.",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "256x256",
      "type": "image/x-icon"
    }
  ],
  "start_url": "/?utm_source=homescreen",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}
'>manifest.json